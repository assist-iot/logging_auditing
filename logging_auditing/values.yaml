# Default values for enabler.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# String to partially override enabler.fullname template (will maintain the release name)
nameOverride: ""
# String to fully override enabler.fullname template
fullnameOverride: ""
# Deploy all the components in the same node
enablerNodeSelector: {}

global:
  pvcName: hlfpvchelm

# Component caorderer values
caorderer:
  tier: internal
  image:
    repository: hyperledger/fabric-ca
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"

  replicaCount: 1
  service:
    type: ClusterIP
    nodePort: ""
    port: 10054
    targetPort: 10054
    containerPort: 10054
    protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits)
  resources: {}
  #  limits:
    #  cpu: 100m
     # memory: 128Mi
   # requests:
    #  cpu: 100m
    #  memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in the component's manifest (container section).
  # Here and in the manifest is included an example.
  envVars:
    FABRIC_CA_SERVER_CA_NAME: caorderer
    FABRIC_CA_SERVER_TLS_ENABLED: "true"
    FABRIC_CA_SERVER_CSR_CN: "caorderer"
    FABRIC_CA_SERVER_CSR_HOSTS: "caorderer"

  persistence:
    # mountPath: /path/in/container
    accessModes:
      - ReadWriteOnce
    size: 500Mi

  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Component caorg1 values
caorg1:
  tier: internal
  image:
    repository: hyperledger/fabric-ca
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.4.9"

  replicaCount: 1
  service:
    type: ClusterIP
    nodePort: ""
    port: 7054
    targetPort: 7054
    containerPort: 7054
    protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits)
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in the component's manifest (container section).
  # Here and in the manifest is included an example.
  envVars:
    FABRIC_CA_SERVER_CA_NAME: caorg1
    FABRIC_CA_SERVER_TLS_ENABLED: "true"
    FABRIC_CA_SERVER_CSR_CN: "caorg1"
    FABRIC_CA_SERVER_CSR_HOSTS: "caorg1"

  persistence:
    # mountPath: /path/in/container
    accessModes:
      - ReadWriteOnce
    size: 500Mi

  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Component caorg2 values
caorg2:
  tier: internal
  image:
    repository: hyperledger/fabric-ca
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.4.9"

  replicaCount: 1
  service:
    type: ClusterIP
    nodePort: ""
    port: 8054
    targetPort: 8054
    containerPort: 8054
    protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits)
  resources: {}
  #  limits:
    #  cpu: 100m
     # memory: 128Mi
   # requests:
    #  cpu: 100m
    #  memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in the component's manifest (container section).
  # Here and in the manifest is included an example.
  envVars:
    FABRIC_CA_SERVER_CA_NAME: caorg2
    FABRIC_CA_SERVER_TLS_ENABLED: "true"
    FABRIC_CA_SERVER_CSR_CN: "caorg2"
    FABRIC_CA_SERVER_CSR_HOSTS: "caorg2"

  persistence:
    # mountPath: /path/in/container
    accessModes:
      - ReadWriteOnce
    size: 500Mi

  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Component orderer values
orderer:
  tier: internal
  image:
    repository: hyperledger/fabric-orderer
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "2.4"

  replicaCount: 1
  service:
    type: ClusterIP
    nodePort: ""
    port: 7050
    targetPort: 7050
    containerPort: 7050
    protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits)
  resources: {}
  #  limits:
    #  cpu: 100m
     # memory: 128Mi
   # requests:
    #  cpu: 100m
    #  memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in the component's manifest (container section).
  # Here and in the manifest is included an example.
  envVars:
    CONFIGTX_ORDERER_ADDRESSES: "orderer:7050"
    ORDERER_GENERAL_LISTENADDRESS : "0.0.0.0"
    ORDERER_GENERAL_LISTENPORT: "7050"
    ORDERER_GENERAL_LOGLEVEL: debug
    ORDERER_GENERAL_LOCALMSPDIR: /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp
    ORDERER_GENERAL_LOCALMSPID: OrdererMSP
    ORDERER_GENERAL_GENESISMETHOD: file
    ORDERER_GENERAL_GENESISFILE: /system-genesis-block/genesis.block
    ORDERER_GENERAL_TLS_ENABLED: "true"
    ORDERER_GENERAL_TLS_PRIVATEKEY: /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.key
    ORDERER_GENERAL_TLS_CERTIFICATE: /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.crt
    ORDERER_GENERAL_TLS_ROOTCAS: /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/ca.crt
    ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY: /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.key
    ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE: /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.crt

  persistence:
    # mountPath: /path/in/container
    accessModes:
      - ReadWriteOnce
    size: 500Mi

  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Component orderer2 values
orderer2:
  tier: internal
  image:
    repository: hyperledger/fabric-orderer
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "2.4"

  replicaCount: 1
  service:
    type: ClusterIP
    nodePort: ""
    port: 7050
    targetPort: 7050
    containerPort: 7050
    protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits)
  resources: {}
  #  limits:
    #  cpu: 100m
     # memory: 128Mi
   # requests:
    #  cpu: 100m
    #  memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in the component's manifest (container section).
  # Here and in the manifest is included an example.
  envVars:
    CONFIGTX_ORDERER_ADDRESSES: "orderer2:7050"
    ORDERER_GENERAL_LISTENADDRESS : "0.0.0.0"
    ORDERER_GENERAL_LISTENPORT: "7050"
    ORDERER_GENERAL_LOGLEVEL: debug
    ORDERER_GENERAL_LOCALMSPDIR: /organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/msp
    ORDERER_GENERAL_LOCALMSPID: OrdererMSP
    ORDERER_GENERAL_GENESISMETHOD: file
    ORDERER_GENERAL_GENESISFILE: /system-genesis-block/genesis.block
    ORDERER_GENERAL_TLS_ENABLED: "true"
    ORDERER_GENERAL_TLS_PRIVATEKEY: /organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/server.key
    ORDERER_GENERAL_TLS_CERTIFICATE: /organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/server.crt
    ORDERER_GENERAL_TLS_ROOTCAS: /organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/ca.crt
    ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY: /organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/server.key
    ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE: /organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/server.crt

  persistence:
    # mountPath: /path/in/container
    accessModes:
      - ReadWriteOnce
    size: 500Mi

  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Component orderer3 values
orderer3:
  tier: internal
  image:
    repository: hyperledger/fabric-orderer
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "2.4"

  replicaCount: 1
  service:
    type: ClusterIP
    nodePort: ""
    port: 7050
    targetPort: 7050
    containerPort: 7050
    protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits)
  resources: {}
  #  limits:
    #  cpu: 100m
     # memory: 128Mi
   # requests:
    #  cpu: 100m
    #  memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in the component's manifest (container section).
  # Here and in the manifest is included an example.
  envVars:
    CONFIGTX_ORDERER_ADDRESSES: "orderer3:7050"
    ORDERER_GENERAL_LISTENADDRESS : "0.0.0.0"
    ORDERER_GENERAL_LISTENPORT: "7050"
    ORDERER_GENERAL_LOGLEVEL: debug
    ORDERER_GENERAL_LOCALMSPDIR: /organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/msp
    ORDERER_GENERAL_LOCALMSPID: OrdererMSP
    ORDERER_GENERAL_GENESISMETHOD: file
    ORDERER_GENERAL_GENESISFILE: /system-genesis-block/genesis.block
    ORDERER_GENERAL_TLS_ENABLED: "true"
    ORDERER_GENERAL_TLS_PRIVATEKEY: /organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/server.key
    ORDERER_GENERAL_TLS_CERTIFICATE: /organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/server.crt
    ORDERER_GENERAL_TLS_ROOTCAS: /organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/ca.crt
    ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY: /organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/server.key
    ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE: /organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/server.crt

  persistence:
    # mountPath: /path/in/container
    accessModes:
      - ReadWriteOnce
    size: 500Mi

  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Component peer0org1 values
peer0org1:
  tier: internal
  image:
    repository: hyperledger/fabric-peer
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "2.4"

  replicaCount: 1
  service:
    type: ClusterIP
    nodePort: ""
    port: 7051
    targetPort: 7051
    containerPort: 7051
    protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits)
  resources: {}
  #  limits:
    #  cpu: 100m
     # memory: 128Mi
   # requests:
    #  cpu: 100m
    #  memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in the component's manifest (container section).
  # Here and in the manifest is included an example.
  envVars:
    CORE_PEER_ADDRESSAUTODETECT: "true"
    CORE_PEER_ID: peer0org1
    CORE_PEER_ADDRESS: peer0org1:7051
    CORE_PEER_LISTENADDRESS: 0.0.0.0:7051
    CORE_PEER_EVENTS_ADDRESS: 0.0.0.0:7061
    CORE_PEER_GOSSIP_BOOTSTRAP: peer0org1:7051
    CORE_PEER_GOSSIP_ENDPOINT: peer0org1:7051
    CORE_PEER_GOSSIP_EXTERNALENDPOINT: peer0org1:7051
    CORE_PEER_GOSSIP_ORGLEADER: "false"
    CORE_PEER_GOSSIP_USELEADERELECTION: "true"
    CORE_PEER_PROFILE_ENABLED: "true"
    CORE_PEER_LOCALMSPID: Org1MSP
    CORE_PEER_MSPCONFIGPATH: /organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp
    FABRIC_LOGGING_SPEC: debug
    CORE_PEER_TLS_ENABLED: "true"
    CORE_PEER_TLS_CERT_FILE: /organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt
    CORE_PEER_TLS_KEY_FILE: /organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key
    CORE_PEER_TLS_ROOTCERT_FILE: /organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
    CORE_LEDGER_STATE_STATEDATABASE: "CouchDB"
    CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS: "localhost:5984"
    FABRIC_CFG_PATH: /etc/hyperledger/fabric
    CORE_OPERATIONS_LISTENADDRESS: 0.0.0.0:9443
  
  persistence:
    # mountPath: /path/in/container
    accessModes:
      - ReadWriteOnce
    size: 500Mi

  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Component clipeer0org1 values
clipeer0org1:
  tier: internal
  image:
    repository: hyperledger/fabric-tools
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "2.4"

  replicaCount: 1
  service:
    type: ClusterIP
    nodePort: ""
    port: 7051
    targetPort: 7051
    containerPort: 7051
    protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits)
  resources: {}
  #  limits:
    #  cpu: 100m
     # memory: 128Mi
   # requests:
    #  cpu: 100m
    #  memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in the component's manifest (container section).
  # Here and in the manifest is included an example.
  envVars:
    ORDERER_CA: /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
    CORE_PEER_ADDRESS: peer0org1:7051
    CORE_PEER_ID: cli.peer0.org1.example.com
    CORE_PEER_LOCALMSPID: Org1MSP
    CORE_PEER_MSPCONFIGPATH: /organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
    CORE_PEER_TLS_CERT_FILE: /organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt
    CORE_PEER_TLS_ENABLED: "true"
    CORE_PEER_TLS_KEY_FILE: /organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key
    CORE_PEER_TLS_ROOTCERT_FILE: /organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
    GOPATH: /opt/gopath
    SYS_CHANNEL:  system-channel
    CORE_CHAINCODE_BUILDER: hyperledger/fabric-ccenv:1.4.8
    FABRIC_LOGGING_SPEC: DEBUG
  
  persistence:
    # mountPath: /path/in/container
    accessModes:
      - ReadWriteOnce
    size: 500Mi

  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Component peer0org2 values
peer0org2:
  tier: internal
  image:
    repository: hyperledger/fabric-peer
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "2.4"

  replicaCount: 1
  service:
    type: ClusterIP
    nodePort: ""
    port: 7051
    targetPort: 7051
    containerPort: 7051
    protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits)
  resources: {}
  #  limits:
    #  cpu: 100m
     # memory: 128Mi
   # requests:
    #  cpu: 100m
    #  memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in the component's manifest (container section).
  # Here and in the manifest is included an example.
  envVars:
    CORE_PEER_ADDRESSAUTODETECT: "true"
    CORE_PEER_ID: peer0org2
    CORE_PEER_ADDRESS: peer0org2:7051
    CORE_PEER_LISTENADDRESS: 0.0.0.0:7051
    CORE_PEER_EVENTS_ADDRESS: 0.0.0.0:7061
    CORE_PEER_GOSSIP_BOOTSTRAP: peer0org2:7051
    CORE_PEER_GOSSIP_ENDPOINT: peer0org2:7051
    CORE_PEER_GOSSIP_EXTERNALENDPOINT: peer0org2:7051
    CORE_PEER_GOSSIP_ORGLEADER: "false"
    CORE_PEER_GOSSIP_USELEADERELECTION: "true"
    CORE_PEER_PROFILE_ENABLED: "true"
    CORE_PEER_LOCALMSPID: Org2MSP
    CORE_PEER_MSPCONFIGPATH: /organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp
    FABRIC_LOGGING_SPEC: debug
    CORE_PEER_TLS_ENABLED: "true"
    CORE_PEER_TLS_CERT_FILE: /organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/server.crt
    CORE_PEER_TLS_KEY_FILE: /organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/server.key
    CORE_PEER_TLS_ROOTCERT_FILE: /organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt
    CORE_LEDGER_STATE_STATEDATABASE: "CouchDB"
    CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS: "localhost:5984"
    FABRIC_CFG_PATH: /etc/hyperledger/fabric
    CORE_OPERATIONS_LISTENADDRESS: 0.0.0.0:9443

  persistence:
    # mountPath: /path/in/container
    accessModes:
      - ReadWriteOnce
    size: 500Mi

  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Component clipeer0org2 values
clipeer0org2:
  tier: internal
  image:
    repository: hyperledger/fabric-tools
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "2.4"

  replicaCount: 1
  service:
    type: NodePort
    nodePort: ""
    port: 80
    targetPort: 80
    containerPort: 80
    protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits)
  resources: {}
  #  limits:
    #  cpu: 100m
     # memory: 128Mi
   # requests:
    #  cpu: 100m
    #  memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in the component's manifest (container section).
  # Here and in the manifest is included an example.
  envVars:
    ORDERER_CA: /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
    CORE_PEER_ADDRESS: peer0org2:7051
    CORE_PEER_ID: cli.peer0.org2.example.com
    CORE_PEER_LOCALMSPID: Org2MSP
    CORE_PEER_MSPCONFIGPATH: /organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp
    CORE_PEER_TLS_CERT_FILE: /organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/server.crt
    CORE_PEER_TLS_ENABLED: "true"
    CORE_PEER_TLS_KEY_FILE: /organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/server.key
    CORE_PEER_TLS_ROOTCERT_FILE: /organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt
    GOPATH: /opt/gopath
    SYS_CHANNEL:  system-channel
    CORE_CHAINCODE_BUILDER: hyperledger/fabric-ccenv:1.4.8
    FABRIC_LOGGING_SPEC: DEBUG

  persistence:
    # mountPath: /path/in/container
    accessModes:
      - ReadWriteOnce
    size: 500Mi

  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  affinity: {}

########################################
# Component couchdb values
couchdb:
  tier: internal
  image:
    repository: hyperledger/fabric-couchdb
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "0.4.15"

  replicaCount: 1
  service:
    type: ClusterIP
    nodePort: ""
    port: 5984
    targetPort: 5984
    containerPort: 5984
    protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits)
  resources: {}
  #  limits:
    #  cpu: 100m
     # memory: 128Mi
   # requests:
    #  cpu: 100m
    #  memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in the component's manifest (container section).
  # Here and in the manifest is included an example.
  envVars:
    exampleVar: exampleVar

  persistence:
    # mountPath: /path/in/container
    accessModes:
      - ReadWriteOnce
    size: 500Mi

  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  affinity: {}

###############################################

createcerts:
  image:
    repository: hyperledger/fabric-ca-tools
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    # CHANGED THE REPO NAME WITH CUSTOM IMAGE AND THE TAG
    tag: "latest"

  restartPolicy: OnFailure
  backoffLimit: 10


  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources: {}'.
  resources: {}
  #  limits:
    #  cpu: 100m
     # memory: 128Mi
   # requests:
    #  cpu: 100m
    #  memory: 128Mi
  
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in the job's manifest (container section).
  # Here and in the manifest is included an example.
  envVars:
    exampleEnvVar: exampleValue

  persistence:
    # mountPath: /path/in/container
    accessModes:
      - ReadWriteOnce
    size: 500Mi

  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  affinity: {}

artifacts:
  image:
    repository: hyperledger/fabric-tools
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    # CHANGED THE REPO NAME WITH CUSTOM IMAGE AND THE TAG
    tag: "2.4"

  restartPolicy: OnFailure
  backoffLimit: 10


  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources: {}'.
  resources: {}
  #  limits:
    #  cpu: 100m
     # memory: 128Mi
   # requests:
    #  cpu: 100m
    #  memory: 128Mi

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in the job's manifest (container section).
  # Here and in the manifest is included an example.
  envVars:
    exampleEnvVar: exampleValue
  
  persistence:
    # mountPath: /path/in/container
    accessModes:
      - ReadWriteOnce
    size: 500Mi


  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  affinity: {}

###############################

# Component loggingbasicorg1 values
loggingbasicorg1:
  tier: internal
  image:
    repository: assistiot/logging_auditing
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.0.0"

  replicaCount: 1
  service:
    type: ClusterIP
    nodePort: ""
    port: 7052
    targetPort: 7052
    containerPort: 7052
    protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits)
  resources: {}
  #  limits:
    #  cpu: 100m
     # memory: 128Mi
   # requests:
    #  cpu: 100m
    #  memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in the component's manifest (container section).
  # Here and in the manifest is included an example.
  envVars:
    CHAINCODE_ID: "${PACKAGE_ID_ORG1}"
    CHAINCODE_SERVER_ADDRESS: "0.0.0.0:7052"

  persistence:
    # mountPath: /path/in/container
    accessModes:
      - ReadWriteOnce
    size: 500Mi

  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  affinity: {}

###############################

# Component loggingbasicorg2 values
loggingbasicorg2:
  tier: internal
  image:
    repository: assistiot/logging_auditing
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.0.0"

  replicaCount: 1
  service:
    type: ClusterIP
    nodePort: ""
    port: 7052
    targetPort: 7052
    containerPort: 7052
    protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits)
  resources: {}
  #  limits:
    #  cpu: 100m
     # memory: 128Mi
   # requests:
    #  cpu: 100m
    #  memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in the component's manifest (container section).
  # Here and in the manifest is included an example.
  envVars:
    CHAINCODE_ID: "${PACKAGE_ID}"
    CHAINCODE_SERVER_ADDRESS: "0.0.0.0:7052"

  persistence:
    # mountPath: /path/in/container
    accessModes:
      - ReadWriteOnce
    size: 500Mi

  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  affinity: {}

###############################

# Component flbasicorg1 values
flbasicorg1:
  tier: internal
  image:
    repository: assistiot/dlt_based_fl
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.0.0"

  replicaCount: 1
  service:
    type: ClusterIP
    nodePort: ""
    port: 7052
    targetPort: 7052
    containerPort: 7052
    protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits)
  resources: {}
  #  limits:
    #  cpu: 100m
     # memory: 128Mi
   # requests:
    #  cpu: 100m
    #  memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in the component's manifest (container section).
  # Here and in the manifest is included an example.
  envVars:
    CHAINCODE_ID: "${PACKAGE_ID}"
    CHAINCODE_SERVER_ADDRESS: "0.0.0.0:7052"

  persistence:
    # mountPath: /path/in/container
    accessModes:
      - ReadWriteOnce
    size: 500Mi

  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  affinity: {}

###############################

# Component flbasicorg2 values
flbasicorg2:
  tier: internal
  image:
    repository: assistiot/dlt_based_fl
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.0.0"

  replicaCount: 1
  service:
    type: ClusterIP
    nodePort: ""
    port: 7052
    targetPort: 7052
    containerPort: 7052
    protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits)
  resources: {}
  #  limits:
    #  cpu: 100m
     # memory: 128Mi
   # requests:
    #  cpu: 100m
    #  memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in the component's manifest (container section).
  # Here and in the manifest is included an example.
  envVars:
    CHAINCODE_ID: "${PACKAGE_ID}"
    CHAINCODE_SERVER_ADDRESS: "0.0.0.0:7052"

  persistence:
    # mountPath: /path/in/container
    accessModes:
      - ReadWriteOnce
    size: 500Mi

  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  affinity: {}

###############################

# Component brokerbasicorg1 values
brokerbasicorg1:
  tier: internal
  image:
    repository: assistiot/distributed_broker
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.0.0"

  replicaCount: 1
  service:
    type: ClusterIP
    nodePort: ""
    port: 7052
    targetPort: 7052
    containerPort: 7052
    protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits)
  resources: {}
  #  limits:
    #  cpu: 100m
     # memory: 128Mi
   # requests:
    #  cpu: 100m
    #  memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in the component's manifest (container section).
  # Here and in the manifest is included an example.
  envVars:
    CHAINCODE_ID: "${PACKAGE_ID}"
    CHAINCODE_SERVER_ADDRESS: "0.0.0.0:7052"

  persistence:
    # mountPath: /path/in/container
    accessModes:
      - ReadWriteOnce
    size: 500Mi

  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  affinity: {}

###############################

# Component brokerbasicorg2 values
brokerbasicorg2:
  tier: internal
  image:
    repository: assistiot/distributed_broker
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.0.0"

  replicaCount: 1
  service:
    type: ClusterIP
    nodePort: ""
    port: 7052
    targetPort: 7052
    containerPort: 7052
    protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits)
  resources: {}
  #  limits:
    #  cpu: 100m
     # memory: 128Mi
   # requests:
    #  cpu: 100m
    #  memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in the component's manifest (container section).
  # Here and in the manifest is included an example.
  envVars:
    CHAINCODE_ID: "${PACKAGE_ID}"
    CHAINCODE_SERVER_ADDRESS: "0.0.0.0:7052"

  persistence:
    # mountPath: /path/in/container
    accessModes:
      - ReadWriteOnce
    size: 500Mi

  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  affinity: {}

###############################

# Component kvbasicorg1 values
kvbasicorg1:
  tier: internal
  image:
    repository: assistiot/data_integrity_verification
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.0.0"

  replicaCount: 1
  service:
    type: ClusterIP
    nodePort: ""
    port: 7052
    targetPort: 7052
    containerPort: 7052
    protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits)
  resources: {}
  #  limits:
    #  cpu: 100m
     # memory: 128Mi
   # requests:
    #  cpu: 100m
    #  memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in the component's manifest (container section).
  # Here and in the manifest is included an example.
  envVars:
    CHAINCODE_ID: "${PACKAGE_ID}"
    CHAINCODE_SERVER_ADDRESS: "0.0.0.0:7052"

  persistence:
    # mountPath: /path/in/container
    accessModes:
      - ReadWriteOnce
    size: 500Mi

  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  affinity: {}

###############################

# Component kvbasicorg2 values
kvbasicorg2:
  tier: internal
  image:
    repository: assistiot/data_integrity_verification
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.0.0"

  replicaCount: 1
  service:
    type: ClusterIP
    nodePort: ""
    port: 7052
    targetPort: 7052
    containerPort: 7052
    protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits)
  resources: {}
  #  limits:
    #  cpu: 100m
     # memory: 128Mi
   # requests:
    #  cpu: 100m
    #  memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in the component's manifest (container section).
  # Here and in the manifest is included an example.
  envVars:
    CHAINCODE_ID: "${PACKAGE_ID}"
    CHAINCODE_SERVER_ADDRESS: "0.0.0.0:7052"

  persistence:
    # mountPath: /path/in/container
    accessModes:
      - ReadWriteOnce
    size: 500Mi

  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  affinity: {}

###############################

# Component api values
api:
  tier: external
  image:
    repository: assistiot/dlt_api:2.0.0
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: "2.0.0"

  replicaCount: 1
  service:
    type: NodePort
    nodePort: "31999"
    port: 9899
    targetPort: 9899
    containerPort: 9899
    protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits)
  resources: {}
  #  limits:
    #  cpu: 100m
     # memory: 128Mi
   # requests:
    #  cpu: 100m
    #  memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in the component's manifest (container section).
  # Here and in the manifest is included an example.
  envVars:
    FABRIC_CA_SERVER_CA_NAME: caorg1

  persistence:
    # mountPath: /path/in/container
    accessModes:
      - ReadWriteOnce
    size: 500Mi

  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  affinity: {}

## If RBAC is enabled on the cluster, dltloggingb needs a service account
## with permissisions sufficient to list pods
#rbac:
  #create: true
  #serviceAccount:
    #create: true
    ## Service account name to be used.
    ## If not set and serviceAccount.create is true a name is generated using the fullname template.
#    name: